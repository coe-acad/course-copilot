{
  "course_info": {
    "course_id": "064409b7-8397-446d-a15e-757b3394f794",
    "course_name": "Intro to Python",
    "description": "Python lists, dict, f strings",
    "user_id": "J0na0dW4yyXLFzXFqrlMmolFrYD3",
    "settings": {
      "course_level": [
        "Year 1"
      ],
      "study_area": [
        "AI & Decentralised Technologies"
      ],
      "pedagogical_components": [
        "Project"
      ],
      "ask_clarifying_questions": false
    },
    "created_at": "",
    "updated_at": ""
  },
  "assets": [
    {
      "asset_id": "6899c61ad8b24dfaf441bf63",
      "asset_name": "newnew",
      "asset_type": "modules-topics",
      "asset_category": "curriculum",
      "asset_content": "### Proposed Course Topics\n\n1. **Introduction to Python Programming**\n   - Overview of Python's History and Usage\n   - Installation and Setup of Python Environment\n   - Introduction to Python Syntax and Semantics\n\n2. **Basic Programming Constructs**\n   - Variables and Data Types\n   - Operators and Expressions\n   - Control Structures: Conditionals and Loops\n\n3. **Data Structures in Python**\n   - Lists, Tuples, and Sets\n   - Dictionaries\n   - Understanding and Implementing Functions\n\n4. **Python's Role in AI and Decentralized Technologies**\n   - Use of Python in AI Applications\n   - Introduction to Python Libraries for AI\n   - Python's Application in Blockchain and Decentralized Tech",
      "last_updated_by": "You",
      "last_updated_at": "11 August 2025 15:59:46",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "6899c803d8b24dfaf441bf68",
      "asset_name": "review",
      "asset_type": "modules-topics",
      "asset_category": "curriculum",
      "asset_content": "### Topics for \"Intro to Python\"\n\n1. **Introduction to Programming Concepts**\n   - Understanding Programming Languages\n   - Basics of Python Syntax\n   - Setting Up the Python Environment\n\n2. **Data Types and Variables**\n   - Primitive Data Types\n   - Working with Variables\n   - Type Conversion\n\n3. **Control Structures**\n   - Conditional Statements\n   - Looping Constructs\n   - Introduction to Recursion\n\n4. **Functions and Modules**\n   - Defining and Calling Functions\n   - Organizing Code with Modules\n   - Understanding Built-in Functions\n\n5. **Data Structures**\n   - Lists, Tuples, and Dictionaries\n   - Sets and Strings\n   - Simple Algorithms with Data Structures\n\n6. **Introduction to Object-Oriented Programming**\n   - Classes and Objects\n   - Inheritance and Polymorphism\n   - Understanding Methods\n\n7. **File Handling and Exceptions**\n   - Reading from and Writing to Files\n   - Handling Exceptions\n   - Best Practices in File I/O\n\n8. **Basic Debugging Techniques**\n   - Understanding Syntax and Logical Errors\n   - Using Debugging Tools in Python\n   - Writing Testable Code",
      "last_updated_by": "You",
      "last_updated_at": "11 August 2025 16:07:55",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "6899c887d8b24dfaf441bf69",
      "asset_name": "same",
      "asset_type": "modules-topics",
      "asset_category": "curriculum",
      "asset_content": "**Intro to Python Course Syllabus**\n\n**Modules and Topics**\n\n1. **Introduction to Python Programming**\n   - Overview of Python and its applications\n   - Installing Python and setting up the development environment\n   - Introduction to the Python interpreter and development tools\n\n2. **Python Basics**\n   - Python syntax and semantics\n   - Variables, data types, and operations\n   - Input and output operations\n\n3. **Control Structures in Python**\n   - Conditional statements\n   - Looping constructs: for and while loops\n   - Exception handling basics\n\n4. **Data Structures in Python**\n   - Lists, tuples, and dictionaries\n   - Strings and string operations\n   - Basic file I/O operations\n\n5. **Functions and Modules**\n   - Defining and calling functions\n   - Function arguments and return values\n   - Importing and using modules\n\n6. **Introduction to AI and Libraries in Python**\n   - Brief overview of AI concepts\n   - Introduction to Python libraries like NumPy, Pandas, and others related to AI & decentralized technologies\n\nThis syllabus provides a theoretical foundation while introducing essential programming concepts and tools used in the field of AI.",
      "last_updated_by": "You",
      "last_updated_at": "11 August 2025 16:10:07",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "689aec6f2545816e91c5f7de",
      "asset_name": "topics",
      "asset_type": "modules-topics",
      "asset_category": "curriculum",
      "asset_content": "Based on the course settings provided, we are developing a first-year undergraduate course titled \"Intro to Python,\" which falls under the study area of \"AI & Decentralised Technologies.\" The course involves a theoretical pedagogical component, suggesting that it will primarily focus on imparting foundational knowledge and understanding rather than practical or project-based learning.\n\n### Reasoning for Topic Selection\n\nGiven the course name and its study area, the topics should revolve around introducing Python programming to beginners while ensuring relevance to AI and decentralized technologies. The scope of the topics should provide a strong foundational understanding that can prepare students for more advanced courses in the subsequent years of their degree program.\n\n### Proposed Course Topics\n\n1. **Introduction to Python Programming**\n   - Overview of Python Language\n   - Setting Up Python Environment\n   - Writing and Executing Basic Python Scripts\n\n2. **Core Python Concepts**\n   - Variables and Data Types\n   - Control Structures (if statements, loops)\n   - Functions and Modules\n   - Error Handling and Debugging\n\n3. **Data Structures in Python**\n   - Lists, Tuples, and Dictionaries\n   - Sets and String Manipulations\n   - Introduction to Libraries (NumPy, pandas)\n\n4. **Basic Concepts in AI with Python**\n   - Introduction to AI and Machine Learning\n   - Exploring AI Libraries (scikit-learn)\n   - Writing Basic AI Models and Algorithms\n  \n5. **Decentralized Technologies Overview**\n   - Introduction to Decentralized Systems\n   - Python Applications in Blockchain\n   - Basic Smart Contract Programming with Python",
      "last_updated_by": "You",
      "last_updated_at": "12 August 2025 12:55:35",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "689aed8e2545816e91c5f7df",
      "asset_name": "neww_test",
      "asset_type": "modules-topics",
      "asset_category": "curriculum",
      "asset_content": "| Module Number | Module Title                           | Module Description                                                                                      | Topics/Subtopics Covered                                                                                                                                  |\n|---------------|----------------------------------------|---------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 1             | Introduction to Programming and Python | This module introduces students to the fundamentals of programming and the Python environment.          | - Understanding programming languages and Python's role<br>- Setting up Python environment<br>- Writing and executing basic Python scripts                  |\n| 2             | Basic Python Syntax and Operations     | This module covers the essential syntax, operations, and control structures in Python.                  | - Variables, data types, and arithmetic operations<br>- Control structures: loops and conditionals                                                        |\n| 3             | Functions and Data Structures          | This module explores defining functions and using basic data structures.                                 | - Defining and using functions<br>- Importing and using Python standard library modules<br>- Lists, tuples, and dictionaries<br>- Operations on data structures |\n| 4             | Introduction to Object-Oriented Programming | Students learn the basics of object-oriented programming, a key paradigm in software design.               | - Basic concepts: classes and objects<br>- Implementing simple classes in Python                                                                          |\n| 5             | Python in AI and Decentralized Technologies | This module connects Python programming to its applications in AI and decentralized technologies.         | - Overview of Python libraries used in AI (e.g., NumPy, TensorFlow basics)<br>- Use of Python in blockchain and decentralization (e.g., simple smart contracts) |",
      "last_updated_by": "You",
      "last_updated_at": "12 August 2025 13:00:22",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "689c3c7b12f2114ee32ddf42",
      "asset_name": "deploy",
      "asset_type": "modules-topics",
      "asset_category": "curriculum",
      "asset_content": "Based on the provided course settings, we are to design a curriculum for an \"Intro to Python\" course, primarily targeting first-year students majoring in \"AI & Decentralised Technologies\". The pedagogical approach emphasizes projects, which implies that students will learn best through hands-on experiences, applying the concepts in practical applications relevant to AI and Blockchain technologies.\n\n### Approach for Course Design\n\n1. **Foundation of Python Programming**: Given that this is an introductory course for Year 1 students, the curriculum should begin with fundamental programming concepts using Python. This includes syntax, data types, and basic operations to ensure everyone starts with a solid grounding.\n\n2. **Application to AI and Decentralised Technologies**: Since the study area is \"AI & Decentralised Technologies,\" the course should quickly transition into relevant applications of Python in these fields. The course should emphasize practical programming skills and applications that prepare students for further studies in AI and decentralized systems.\n\n3. **Project-Based Learning**: Given the pedagogical component emphasizes projects, the course should focus on creating opportunities for students to work on projects that integrate Python programming with AI and decentralized technology principles. This could involve mini-projects culminating in a final project where students demonstrate their accumulated knowledge and skills.\n\n### Proposed Topics\n\n1. **Introduction to Python Programming**\n   - Python Syntax and Semantics\n   - Variables and Data Types\n   - Control Structures: Conditionals and Loops\n\n2. **Data Structures and Algorithms with Python**\n   - Lists, Tuples, and Dictionaries\n   - Functions and Modular Programming\n   - Basic Algorithms and Problem-solving\n\n3. **Python Application in AI**\n   - Introduction to Libraries like NumPy and Pandas\n   - Basic Data Manipulation\n   - Introduction to Machine Learning Concepts\n\n4. **Python Application in Decentralised Technologies**\n   - Understanding Blockchain Basics\n   - Python Libraries for Blockchain (e.g., Web3.py)\n   - Smart Contract Basics\n\n5. **Project Development**\n   - Project Planning and Design\n   - Implementing a Python-Based AI or Decentralised Technology Project\n   - Presentation and Documentation of Project",
      "last_updated_by": "You",
      "last_updated_at": "13 August 2025 07:19:23",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "6899c718d8b24dfaf441bf64",
      "asset_name": "paper",
      "asset_type": "question-paper",
      "asset_category": "content",
      "asset_content": "### Sample Exam Question Paper\n\n#### Total Marks: 100\n#### Time: 3 Hours\n\n---\n\n**Section A: Multiple Choice Questions (20 Marks)**\n\n1. What is the correct syntax to output \"Hello, World\" in Python?\n   - a) console.log(\"Hello, World\")\n   - b) echo \"Hello, World\"\n   - c) print(\"Hello, World\")\n   - d) printf(\"Hello, World\")\n   \n   *(1 mark)*\n\n2. Which of the following data types is immutable in Python?\n   - a) List\n   - b) Dictionary\n   - c) Set\n   - d) Tuple\n   \n   *(1 mark)*\n\n3. What will be the output of the following code?\n   ```python\n   print(2 ** 3 ** 2)\n   ```\n   - a) 64\n   - b) 512\n   - c) 256\n   - d) 8\n   \n   *(1 mark)*\n\n4. Which keyword is used to define a function in Python?\n   - a) function\n   - b) fun\n   - c) def\n   - d) define\n   \n   *(1 mark)*\n\n5. How can you generate random numbers in Python?\n   - a) random.rand()\n   - b) rand()\n   - c) random()\n   - d) random.random()\n   \n   *(1 mark)*\n\n*(Total for Section A: 5 marks)*\n\n---\n\n**Section B: Short Answer Questions (40 Marks)**\n\n1. Explain what a variable is in Python and give an example. \n   ***(3 marks)***\n\n2. Describe the difference between a list and a tuple in Python.\n   ***(3 marks)***\n\n3. Write a Python function that calculates the factorial of a number. ***(6 marks)***\n\n4. Explain the use of the 'self' keyword in Python classes with an example.\n   ***(6 marks)***\n\n5. What is meant by 'inheritance' in Python? Provide a simple example code.\n   ***(6 marks)***\n\n6. Describe how error handling is implemented in Python with try and except blocks.\n   ***(5 marks)***\n\n7. Explain the concept of 'decorators' in Python with a basic example.\n   ***(5 marks)***\n\n8. How does a 'while' loop differ from a 'for' loop in Python? Provide examples.\n   ***(6 marks)***\n\n*(Total for Section B: 40 marks)*\n\n---\n\n**Section C: Descriptive/Programming Questions (40 Marks)**\n\n1. Write a Python program that reads a text file and counts the total number of words. Include error handling to manage file access issues. ***(10 marks)***\n\n2. Describe the importance of libraries in Python programming. Illustrate your answer by explaining how the NumPy library can be used to perform basic array operations. ***(15 marks)***\n\n3. Discuss the role of Python in AI and Decentralised Technologies, providing examples of frameworks or libraries that support these areas. ***(15 marks)***\n\n*(Total for Section C: 40 marks)*\n\n---\n\n### Instructions for Candidates:\n- Ensure to read each question carefully and answer all sections.\n- Manage your time effectively to attempt all questions.\n- Python syntax accuracy will be considered in programming questions.",
      "last_updated_by": "You",
      "last_updated_at": "11 August 2025 16:04:00",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "6899c71ed8b24dfaf441bf65",
      "asset_name": "paper",
      "asset_type": "question-paper",
      "asset_category": "content",
      "asset_content": "### Sample Exam Question Paper\n\n#### Total Marks: 100\n#### Time: 3 Hours\n\n---\n\n**Section A: Multiple Choice Questions (20 Marks)**\n\n1. What is the correct syntax to output \"Hello, World\" in Python?\n   - a) console.log(\"Hello, World\")\n   - b) echo \"Hello, World\"\n   - c) print(\"Hello, World\")\n   - d) printf(\"Hello, World\")\n   \n   *(1 mark)*\n\n2. Which of the following data types is immutable in Python?\n   - a) List\n   - b) Dictionary\n   - c) Set\n   - d) Tuple\n   \n   *(1 mark)*\n\n3. What will be the output of the following code?\n   ```python\n   print(2 ** 3 ** 2)\n   ```\n   - a) 64\n   - b) 512\n   - c) 256\n   - d) 8\n   \n   *(1 mark)*\n\n4. Which keyword is used to define a function in Python?\n   - a) function\n   - b) fun\n   - c) def\n   - d) define\n   \n   *(1 mark)*\n\n5. How can you generate random numbers in Python?\n   - a) random.rand()\n   - b) rand()\n   - c) random()\n   - d) random.random()\n   \n   *(1 mark)*\n\n*(Total for Section A: 5 marks)*\n\n---\n\n**Section B: Short Answer Questions (40 Marks)**\n\n1. Explain what a variable is in Python and give an example. \n   ***(3 marks)***\n\n2. Describe the difference between a list and a tuple in Python.\n   ***(3 marks)***\n\n3. Write a Python function that calculates the factorial of a number. ***(6 marks)***\n\n4. Explain the use of the 'self' keyword in Python classes with an example.\n   ***(6 marks)***\n\n5. What is meant by 'inheritance' in Python? Provide a simple example code.\n   ***(6 marks)***\n\n6. Describe how error handling is implemented in Python with try and except blocks.\n   ***(5 marks)***\n\n7. Explain the concept of 'decorators' in Python with a basic example.\n   ***(5 marks)***\n\n8. How does a 'while' loop differ from a 'for' loop in Python? Provide examples.\n   ***(6 marks)***\n\n*(Total for Section B: 40 marks)*\n\n---\n\n**Section C: Descriptive/Programming Questions (40 Marks)**\n\n1. Write a Python program that reads a text file and counts the total number of words. Include error handling to manage file access issues. ***(10 marks)***\n\n2. Describe the importance of libraries in Python programming. Illustrate your answer by explaining how the NumPy library can be used to perform basic array operations. ***(15 marks)***\n\n3. Discuss the role of Python in AI and Decentralised Technologies, providing examples of frameworks or libraries that support these areas. ***(15 marks)***\n\n*(Total for Section C: 40 marks)*\n\n---\n\n### Instructions for Candidates:\n- Ensure to read each question carefully and answer all sections.\n- Manage your time effectively to attempt all questions.\n- Python syntax accuracy will be considered in programming questions.\n\nThis exam paper aims to test your understanding of fundamental Python concepts, basic programming skills, and how Python can be applied in AI and Decentralised Technologies.",
      "last_updated_by": "You",
      "last_updated_at": "11 August 2025 16:04:06",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "6899c77ed8b24dfaf441bf66",
      "asset_name": "paper",
      "asset_type": "question-paper",
      "asset_category": "content",
      "asset_content": "### Exam Question Paper: Intro to Python\n\n---\n\n#### Duration: 2 Hours\n\n---\n\n### Section A: Conceptual Understanding (25 Marks)\n\n1. **Basic Syntax and Data Types**  \n   a. What is the difference between a list and a tuple in Python? Give examples. (2 marks)  \n   b. Explain the role of indentation in Python. Why is it important? (3 marks)\n\n2. **Control Structures**  \n   a. Describe how a `for loop` differs from a `while loop` in Python. Provide code examples for each. (3 marks)  \n   b. Write a Python script to print the first ten numbers of the Fibonacci sequence. (4 marks)\n\n3. **Functions**  \n   a. Define a function in Python and explain the significance of the 'return' keyword. (2 marks)  \n   b. Discuss the scope of variables in Python with an example involving global and local variables. (3 marks)\n\n4. **Error Handling**  \n   a. What are exceptions in Python? Explain with an example. (4 marks)  \n   b. Write a small piece of code to handle a division by zero error using try-except blocks. (4 marks)\n\n---\n\n### Section B: Applied Programming (25 Marks)\n\n5. **Data Structures and Collection Types**  \n   a. Create a Python program to find the largest number in a list. (5 marks)  \n   b. Illustrate the use of dictionary data type in storing and retrieving employee records. Provide a code snippet. (5 marks)\n\n6. **Modules and Libraries**  \n   a. Explain the importance of libraries in Python. List any three popular Python libraries used in AI. (3 marks)  \n   b. Demonstrate how to use the `random` module to simulate a dice roll. (4 marks)\n\n7. **File I/O**  \n   a. Discuss how reading from and writing to files is managed in Python. Include the concept of file modes in your explanation. (3 marks)  \n   b. Write a Python script to read data from a file and display only the lines that contain the word \"Python\". (5 marks)\n\n---\n\n### Section C: Advanced Concepts (Bonus - 10 Marks)\n\n8. **Object-Oriented Programming**  \n   a. What is OOP and how is it implemented in Python? Briefly describe the concepts of inheritance and polymorphism with examples. (5 marks)\n\n9. **Introduction to AI with Python**  \n   a. Outline a simple use case of Python in AI. Discuss any Python library that facilitates AI technology. (5 marks)",
      "last_updated_by": "You",
      "last_updated_at": "11 August 2025 16:05:42",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "6899c781d8b24dfaf441bf67",
      "asset_name": "paper",
      "asset_type": "question-paper",
      "asset_category": "content",
      "asset_content": "### Exam Question Paper: Intro to Python\n\n---\n\n#### Duration: 2 Hours\n\n---\n\n### Section A: Conceptual Understanding (25 Marks)\n\n1. **Basic Syntax and Data Types**  \n   a. What is the difference between a list and a tuple in Python? Give examples. (2 marks)  \n   b. Explain the role of indentation in Python. Why is it important? (3 marks)\n\n2. **Control Structures**  \n   a. Describe how a `for loop` differs from a `while loop` in Python. Provide code examples for each. (3 marks)  \n   b. Write a Python script to print the first ten numbers of the Fibonacci sequence. (4 marks)\n\n3. **Functions**  \n   a. Define a function in Python and explain the significance of the 'return' keyword. (2 marks)  \n   b. Discuss the scope of variables in Python with an example involving global and local variables. (3 marks)\n\n4. **Error Handling**  \n   a. What are exceptions in Python? Explain with an example. (4 marks)  \n   b. Write a small piece of code to handle a division by zero error using try-except blocks. (4 marks)\n\n---\n\n### Section B: Applied Programming (25 Marks)\n\n5. **Data Structures and Collection Types**  \n   a. Create a Python program to find the largest number in a list. (5 marks)  \n   b. Illustrate the use of dictionary data type in storing and retrieving employee records. Provide a code snippet. (5 marks)\n\n6. **Modules and Libraries**  \n   a. Explain the importance of libraries in Python. List any three popular Python libraries used in AI. (3 marks)  \n   b. Demonstrate how to use the `random` module to simulate a dice roll. (4 marks)\n\n7. **File I/O**  \n   a. Discuss how reading from and writing to files is managed in Python. Include the concept of file modes in your explanation. (3 marks)  \n   b. Write a Python script to read data from a file and display only the lines that contain the word \"Python\". (5 marks)\n\n---\n\n### Section C: Advanced Concepts (Bonus - 10 Marks)\n\n8. **Object-Oriented Programming**  \n   a. What is OOP and how is it implemented in Python? Briefly describe the concepts of inheritance and polymorphism with examples. (5 marks)\n\n9. **Introduction to AI with Python**  \n   a. Outline a simple use case of Python in AI. Discuss any Python library that facilitates AI technology. (5 marks)\n\n**Note:** This paper represents an introductory exam and does not require any specific prior knowledge beyond the basic Python concepts introduced in Year 1 courses. Adjust the format and content to suit detailed curriculum topics when they become available.",
      "last_updated_by": "You",
      "last_updated_at": "11 August 2025 16:05:45",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "689abea045bdd1cae2e85304",
      "asset_name": "paper",
      "asset_type": "question-paper",
      "asset_category": "assessments",
      "asset_content": "### Intro to Python Exam Paper\n\n**Duration:** 2 hours  \n**Total Marks:** 100\n\n**Question 1: Basic Concepts and Syntax**  \na. What is a variable in Python? Provide an example. (3 marks)  \nb. Explain the difference between a tuple and a list. Provide examples for each. (4 marks)  \nc. What is the purpose of the `print()` function in Python? Illustrate with an example. (3 marks)\n\n**Question 2: Control Structures**  \na. Write a Python script to find the largest of three numbers using an `if-else` statement. (5 marks)  \nb. Explain the use of the `for` loop with an example of how it can be used to iterate over a list. (5 marks)\n\n**Question 3: Functions**  \na. Define a function in Python that takes two arguments and returns their sum. Provide a script to demonstrate its use. (5 marks)  \nb. What are default parameters in Python? Illustrate with a code example. (5 marks)\n\n**Question 4: Data Structures**  \na. Describe a dictionary in Python, including how to add a key-value pair to a dictionary. (5 marks)  \nb. Write a Python program to check if a specific key exists in a dictionary. (5 marks)\n\n**Question 5: Error and Exception Handling**  \na. What is an exception in Python? How is exception handling achieved? (5 marks)  \nb. Write a Python code snippet that handles the division of a number by zero using exception handling. (5 marks)\n\n**Question 6: File I/O**  \na. Explain how to open a file in Python. What modes can you use to open a file? (6 marks)  \nb. Write a Python program to read the contents of a file named `data.txt` and display it. (6 marks)\n\n**Question 7: Object-Oriented Programming**  \na. What is a class in Python? Create a simple class named `Car` with an `__init__` method and a display method. (7 marks)  \nb. Explain how inheritance is implemented in Python with an example. (7 marks)\n\n**Question 8: Libraries and Modules**  \na. How do you import a module in Python? Illustrate with an example of importing the `math` module and using its `sqrt` function. (5 marks)  \nb. Describe the use of virtual environments in Python programming. (5 marks)",
      "last_updated_by": "You",
      "last_updated_at": "12 August 2025 09:40:08",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "689aeb392545816e91c5f7db",
      "asset_name": "quiz",
      "asset_type": "quiz",
      "asset_category": "assessments",
      "asset_content": "1. **Understanding Variables in Python**  \n   Q: Which of the following is a valid Python variable name?\n   - A) 2nd_variable\n   - B) second-variable\n   - C) secondVariable\n   - D) second variable\n   \n   Correct Answer: C) secondVariable\n\n2. **Applying Python Control Structures**  \n   Q: Consider the following code snippet. What will be the output?\n   ```python\n   for i in range(3):\n       print(i)\n       if i == 1:\n           break\n   ```\n   - A) 0 1 2\n   - B) 0 1 \n   - C) 1 2 3\n   - D) 0 1 1 2\n   \n   Correct Answer: B) 0 1\n\n3. **Analyzing Data with Python Libraries**  \n   Q: Which Python library would you use for data manipulation and analysis, particularly with dataset operations?\n   - A) NumPy\n   - B) Matplotlib\n   - C) Pandas\n   - D) SciPy\n   \n   Correct Answer: C) Pandas\n\n4. **Designing Basic Python Programs**  \n   Q: What is the output of the following Python code?\n   ```python\n   def fibonacci(n):\n       if n <= 1:\n           return n\n       else:\n           return(fibonacci(n-1) + fibonacci(n-2))\n   \n   result = fibonacci(4)\n   print(result)\n   ```\n   - A) 4\n   - B) 3\n   - C) 2\n   - D) 5\n   \n   Correct Answer: B) 3\n\n5. **Conditional Statements in Python**  \n   Q: What will be the output of the following code?\n   ```python\n   x = 10\n   if x > 5:\n       print(\"Greater\")\n   elif x == 5:\n       print(\"Equal\")\n   else:\n       print(\"Smaller\")\n   ```\n   - A) Equal\n   - B) Greater\n   - C) Smaller\n   - D) Error\n   \n   Correct Answer: B) Greater\n\n6. **Function Parameters in Python**  \n   Q: What will happen if you try to modify a parameter inside a function?\n   ```python\n   def modify(x):\n       x = 10\n       return x\n   \n   y = 5\n   modify(y)\n   print(y)\n   ```\n   - A) 10\n   - B) 5\n   - C) Error\n   - D) None of the above\n   \n   Correct Answer: B) 5\n\n7. **File I/O in Python**  \n   Q: Which method is used to read the entire content of a text file as a string?\n   - A) read()\n   - B) readline()\n   - C) readlines()\n   - D) readall()\n   \n   Correct Answer: A) read()\n\n8. **Looping Concepts in Python**  \n   Q: What is the output of the following code snippet?\n   ```python\n   numbers = [1, 2, 3, 4, 5]\n   sum = 0\n   for n in numbers:\n       sum += n\n       if sum > 10:\n           break\n   print(sum)\n   ```\n   - A) 10\n   - B) 6\n   - C) 11\n   - D) 15\n   \n   Correct Answer: C) 11\n\n9. **List Comprehension in Python**  \n   Q: Which of the following is a correct list comprehension?\n   - A) `[x**2; for x in range(5)]`\n   - B) `{x**2 for x in range(5)}`\n   - C) `[x**2 for x in range(5)]`\n   - D) `(x**2 for x in range(5))`\n   \n   Correct Answer: C) [x**2 for x in range(5)]\n\n10. **Error Handling in Python**  \n    Q: What type of error will be raised by the following code?\n    ```python\n    print(unknown_variable)\n    ```\n    - A) SyntaxError\n    - B) NameError\n    - C) TypeError\n    - D) ValueError\n    \n    Correct Answer: B) NameError",
      "last_updated_by": "You",
      "last_updated_at": "12 August 2025 12:50:25",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "689c0ef577a3952c4d447683",
      "asset_name": "newtry",
      "asset_type": "activity",
      "asset_category": "assessments",
      "asset_content": "Develop a Python project that utilizes basic AI concepts to analyze data and applies decentralized technology principles using Python libraries.\n\n### Materials:\n- Access to a computer with Python and necessary libraries installed (NumPy, pandas, scikit-learn)\n- Internet access for research and accessing documentation\n- Course materials on Python basics, AI, and decentralized technologies.\n\n### Steps:\n1. **Introduction to the Project:**\n   - Brief students on the goals of the project aligning with AI and decentralized technologies, explain deliverables such as a project report and code submission.\n\n2. **Project Planning:**\n   - Require students to form teams and brainstorm project ideas that incorporate Python in AI applications or decentralized tech, like a simple blockchain or a machine learning model on a sample dataset.\n\n3. **Research and Design:**\n   - Allocate time for research on AI models or blockchain fundamentals that can be implemented using Python.\n   - Outline a project plan detailing the desired functionalities and expected outcomes.\n\n4. **Implementation:**\n   - Guide students to write and debug Python code implementing core functionalities using listed libraries (e.g., NumPy for data manipulation, scikit-learn for simple machine learning tasks).\n   - Encourage teams to integrate a simple smart contract or AI model, utilizing reference materials and external sources as needed.\n\n5. **Testing and Evaluation:**\n   - Have students test their code with different data sets or scenarios and evaluate its performance.\n   - Implement peer-to-peer review sessions within teams for constructive feedback.\n\n6. **Presentation and Submission:**\n   - Organize presentations where each team showcases their project outcomes, challenges faced, and learning experiences.\n   - Collect final project submissions including the code, a report, and a demo video if possible.\n\n### Learning Outcomes:\n- Apply Python programming efficiently to solve problems related to AI and decentralized technologies.\n- Demonstrate an understanding of integrating Python with libraries for AI and decentralized applications.\n- Exhibit teamwork skills and ability to research, design, and implement complex programming projects.\n- Critically analyze project outcomes and demonstrate continuous improvement through peer and self-assessment.\n\nThis activity aims to bolster the students' practical understanding of Python as a tool in advancing AI and blockchain technologies, preparing them for potential future contributions in rapidly progressing fields.",
      "last_updated_by": "You",
      "last_updated_at": "13 August 2025 09:35:09",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "689c0f4d77a3952c4d447684",
      "asset_name": "qq",
      "asset_type": "activity",
      "asset_category": "assessments",
      "asset_content": "**Objective:** \nTo enable students to apply Python in developing a basic project related to AI and decentralized technologies, enhancing their practical programming skills.\n\n**Materials:** \n- Python IDE (e.g., PyCharm, Jupyter Notebook) \n- Access to Python libraries such as NumPy, Pandas, and scikit-learn \n- Documentation and tutorials for using Python in blockchain \n- Access to a computer with Python installed\n\n**Steps:** \n1. **Introduction to Python for AI and Decentralized Technologies:** \n - Begin with a brief recap of Python basics, covering variables, data types, and control structures.\n - Discuss the role of Python in AI and decentralized technologies through examples.\n\n2. **Project Setup:** \n - Equip students with the required libraries and tools.\n - Guide them through setting up their Python environment and tools.\n\n3. **Developing AI Models:** \n - Introduce students to scikit-learn for building simple machine learning models.\n - Assign a mini-project where students implement a basic predictive model, such as a linear regression or classification task using a dataset.\n\n4. **Blockchain Application:** \n - Provide an overview of Python's applicability in blockchain.\n - Task students with creating a simple smart contract or blockchain application using Python libraries.\n\n5. **Project Presentation and Review:** \n - Have students present their projects in class.\n - Carry out a peer-review session where students critique each other\u2019s work, offering constructive feedback.\n\n**Learning Outcomes:** \n- Explain the integration of Python in AI and decentralized technologies.\n- Demonstrate the ability to set up a Python environment with libraries for AI and blockchain.\n- Develop and implement a simple machine learning model using Python.\n- Create a basic blockchain application or smart contract using Python libraries.\n- Communicate project findings and their implications in both AI and decentralized systems contexts.",
      "last_updated_by": "You",
      "last_updated_at": "13 August 2025 09:36:37",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "68c161c58501d91226eca974",
      "asset_name": "mark scheme",
      "asset_type": "mark-scheme",
      "asset_category": "content",
      "asset_content": "- **Assessment Title**: Intro to Python Programming Project\n- **Total Marks**: 100\n\n**Marking Criteria**:\n\n1. **Understanding Basic Python Concepts (20 marks)**\n   - **Excellent (20 marks)**: Thorough understanding of Python syntax, variables, control structures, and I/O operations. No errors and clear explanation.\n   - **Good (15 marks)**: Understands most basics with minor errors. Explanation is mostly clear.\n   - **Satisfactory (10 marks)**: Basic understanding with some errors. Explanation somewhat unclear.\n   - **Needs Improvement (5 marks)**: Frequent errors, poor explanation, lacks understanding.\n\n2. **Application of Python in Problem-Solving (25 marks)**\n   - **Excellent (25 marks)**: Effectively solves complex problems, optimized solutions, and clear documentation.\n   - **Good (20 marks)**: Solves problems with some optimization. Few approach and documentation issues.\n   - **Satisfactory (15 marks)**: Solves simpler problems, struggles with complexity. Basic documentation.\n   - **Needs Improvement (10 marks)**: Difficulty solving problems, lacks optimization, unclear documentation.\n\n3. **Use of Python Libraries for Data Analysis (20 marks)**\n   - **Excellent (20 marks)**: Skillful use of NumPy and Pandas, innovative solutions, well-documented.\n   - **Good (15 marks)**: Competent use with minor issues in analysis or documentation.\n   - **Satisfactory (10 marks)**: Basic use with some errors in analysis or documentation.\n   - **Needs Improvement (5 marks)**: Significant errors, poor analysis and documentation.\n\n4. **Project Design & Implementation (25 marks)**\n   - **Excellent (25 marks)**: Comprehensive project design and implementation, excellent documentation and presentation.\n   - **Good (20 marks)**: Well-structured project with minor integration or documentation issues.\n   - **Satisfactory (15 marks)**: Basic project, some skill integration, lacks depth in design and documentation.\n   - **Needs Improvement (10 marks)**: Incomplete project, poor integration and documentation.\n\n5. **Presentation and Reflection (10 marks)**\n   - **Excellent (10 marks)**: Clear presentation, insightful reflection.\n   - **Good (8 marks)**: Clear presentation with minor gaps in reflection.\n   - **Satisfactory (6 marks)**: Basic presentation and reflection, lacks depth.\n   - **Needs Improvement (4 marks)**: Poor presentation quality, little reflection.\n\nThis mark scheme emphasizes understanding and practical application of Python in problem-solving, data analysis, and developing projects, aligning with the AI and Decentralized Technologies context. Each criterion assesses conceptual understanding and practical skills in Python programming.",
      "last_updated_by": "You",
      "last_updated_at": "10 September 2025 17:02:21",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "68c947c52d8e18602437dda0",
      "asset_name": "questions ",
      "asset_type": "question-paper",
      "asset_category": "assessments",
      "asset_content": "Here are 10 exam questions for the \"Intro to Python\" course:\n\n1. **Python Basics**\n   - a. What are the key differences between Python 2 and Python 3? Give two examples. (2)\n   - b. Write a simple Python program to display \"Hello, World!\" on the screen. (2)\n\n2. **Data Types and Variables**\n   - a. List three different data types available in Python and provide code examples for each. (3)\n   - b. How do you perform type conversion in Python? Illustrate with an example. (2)\n\n3. **Control Flow**\n   - a. Explain the use of an 'if-else' statement with an example program in Python. (3)\n   - b. What is the syntax for a 'for' loop that prints each character of a string? (2)\n\n4. **Functions and Modules**\n   - a. How do you define a function in Python? What is the purpose of a return statement? (3)\n   - b. Create a Python function to return the factorial of a given number. (3)\n\n5. **Error Handling**\n   - a. What is exception handling in Python? Provide an example using try and except blocks. (3)\n   - b. Describe how finally is used in Python exception handling. (2)\n\n6. **File Operations**\n   - a. How do you open and read a file in Python? Write a code snippet to read a file named \"data.txt.\" (3)\n   - b. Explain the difference between 'r' and 'w' modes in file handling. (2)\n\n7. **Data Structures**\n   - a. Differentiate between a list and a tuple in Python. Provide examples. (3)\n   - b. Write a Python script to add an element to a set and demonstrate its immutability. (3)\n\n8. **Introduction to Libraries**\n   - a. What are Python libraries, and how are they installed? Provide a use case for the 'requests' library. (3)\n   - b. Use the Pandas library to read a CSV file and display its first five rows. (3)\n\n9. **Python in AI**\n   - a. Briefly explain how Python is used for data analysis in AI applications. (2)\n   - b. Write a Python program using SciPy to perform a basic statistical operation. (3)\n\n10. **Python and Blockchain**\n    - a. How can Python be utilized in developing blockchain applications? (2)\n    - b. Provide a Python code example that initializes a blockchain class. (3)\n\nThese questions are designed to cover a range of concepts and skills relevant to the Intro to Python course.",
      "last_updated_by": "You",
      "last_updated_at": "16 September 2025 11:19:33",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    },
    {
      "asset_id": "68c948232d8e18602437dda2",
      "asset_name": "mark scheme",
      "asset_type": "mark-scheme",
      "asset_category": "assessments",
      "asset_content": "```json\n[\n  {\n    \"question_number\": 1,\n    \"marking_scheme\": [\n      \"(1 mark) Explanation of a Python list as a collection of items.\",\n      \"(1 mark) Providing a correct syntactical code example of a list in Python.\",\n      \"(1 mark) Demonstrating the append method with a correct code example.\"\n    ],\n    \"deductions\": [],\n    \"notes\": \"Open-ended questions: any one comprehensive, context-relevant answer can earn full marks. Minor calculation errors should not cost any marks if reasoning is sound. Bullets must call out the concept or context the student needs to cover, but need not use verbatim phrasing\u2014equivalent meaning is fine. Provide marks liberally if the student shows rich understanding even if not using the right terms.\"\n  },\n  {\n    \"question_number\": 2,\n    \"marking_scheme\": [\n      \"(1 mark) Definition of a palindrome as a word that reads the same forwards and backwards.\",\n      \"(1 mark) Explanation of the logic used to determine a palindrome.\",\n      \"(1 mark) Code example of a Python script checking for palindromes.\",\n      \"(1 mark) Use of comments explaining the code.\"\n    ],\n    \"deductions\": [],\n    \"notes\": \"Minor syntactical errors should not affect marks if logic and core concepts are clearly demonstrated.\"\n  },\n  {\n    \"question_number\": 3,\n    \"marking_scheme\": [\n      \"(2 marks) Description differentiating 'for' and 'while' loops in Python.\",\n      \"(1 mark) Code example demonstrating a 'for' loop.\",\n      \"(1 mark) Code example demonstrating a 'while' loop.\"\n    ],\n    \"deductions\": [],\n    \"notes\": \"The explanations should be conceptually accurate and relevant. Minor errors in code syntax should not detract from the overall understanding demonstrated.\"\n  },\n  {\n    \"question_number\": 4,\n    \"marking_scheme\": [\n      \"(2 marks) Explanation of what a function is and its purpose in Python.\",\n      \"(1 mark) Simple function example that returns the square of a number.\"\n    ],\n    \"deductions\": [],\n    \"notes\": \"Full credit should be awarded for logically structured responses that demonstrate clear understanding of functions even if syntax is slightly incorrect.\"\n  },\n  {\n    \"question_number\": 5,\n    \"marking_scheme\": [\n      \"(2 marks) Explanation of exception handling using try and except blocks.\",\n      \"(1 mark) Example demonstrating use of try/except in handling exceptions.\"\n    ],\n    \"deductions\": [],\n    \"notes\": \"Responses demonstrating effective understanding of exception handling should receive full marks.\"\n  },\n  {\n    \"question_number\": 6,\n    \"marking_scheme\": [\n      \"(2 marks) Explanation of Python dictionaries.\",\n      \"(2 marks) Programmatic example to count frequency of elements using a dictionary.\"\n    ],\n    \"deductions\": [],\n    \"notes\": \"Thorough understanding should be credited even if minor syntax issues are present. Logical flow of thought and accurate representation of Python dictionary usage is key.\"\n  },\n  {\n    \"question_number\": 7,\n    \"marking_scheme\": [\n      \"(2 marks) Explanation of list comprehension concept.\",\n      \"(2 marks) Example converting Celsius to Fahrenheit using list comprehension.\"\n    ],\n    \"deductions\": [],\n    \"notes\": \"Any attempt that shows fundamental understanding and correct usage of list comprehension should be rewarded, despite possible syntax errors.\"\n  },\n  {\n    \"question_number\": 8,\n    \"marking_scheme\": [\n      \"(2 marks) Explanation of the role and significance of NumPy in Python.\",\n      \"(2 marks) Code example creating a 2D numpy array filled with zeros.\"\n    ],\n    \"deductions\": [],\n    \"notes\": \"Understanding of the role of NumPy in data operations is crucial. Code snippets should logically follow the explanation.\"\n  },\n  {\n    \"question_number\": 9,\n    \"marking_scheme\": [\n      \"(2 marks) Explanation of the purpose of comments in coding.\",\n      \"(1 mark) Example of single-line Python comment.\",\n      \"(1 mark) Example of multi-line Python comment.\"\n    ],\n    \"deductions\": [],\n    \"notes\": \"Responses showing understanding of the importance of comments, irrespective of minor syntax errors, should receive full marks.\"\n  },\n  {\n    \"question_number\": 10,\n    \"marking_scheme\": [\n      \"(2 marks) Explanation of Python modules and their purposes.\",\n      \"(2 marks) Code example using math module to calculate square root.\"\n    ],\n    \"deductions\": [],\n    \"notes\": \"Demonstrating accurate understanding and usage of modules in Python should be prioritized over minor syntax mistakes.\"\n  }\n]\n```",
      "last_updated_by": "You",
      "last_updated_at": "16 September 2025 11:21:07",
      "course_id": "064409b7-8397-446d-a15e-757b3394f794"
    }
  ]
}