{
  "course_info": {
    "course_id": "09c0a2dc-395c-4b53-b7f9-5230311effaf",
    "course_name": "Into to python",
    "description": "basic python course",
    "user_id": "J0na0dW4yyXLFzXFqrlMmolFrYD3",
    "settings": {},
    "created_at": "",
    "updated_at": ""
  },
  "assets": [
    {
      "asset_id": "689c6ebd12f2114ee32ddf47",
      "asset_name": "Python course outcomes",
      "asset_type": "course-outcomes",
      "asset_category": "curriculum",
      "asset_content": "| CO# | Name                      | Description                                                                                                                                                 | Bloom's Level(s)      | Assessment Ideas                                                   |\n|-----|---------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------|-------------------------------------------------------------------|\n| CO1 | Python Basics             | Explain and apply fundamental Python programming concepts including variables, data types, and control structures.                                           | Understanding, Applying | Quizzes, lab exercises requiring implementation of basic concepts  |\n| CO2 | Functional Programming    | Develop simple Python programs using functions and modules to organize code effectively.                                                                     | Applying, Analyzing   | Assignments to develop modular code, peer code reviews             |\n| CO3 | Data Structures           | Utilize Python's data structures such as lists, dictionaries, and sets to solve problems.                                                                    | Analyzing, Applying   | Projects involving problem-solving using appropriate data structures |\n| CO4 | Debugging and Testing     | Use debugging techniques and testing frameworks to identify and fix coding errors.                                                                           | Evaluating            | Debugging exercises, participation in code review sessions         |\n| CO5 | Object-Oriented Concepts  | Implement basic object-oriented programming principles using Python, including classes and inheritance.                                                       | Applying, Creating    | Coding exercises to create class structures, peer assessments      |\n| CO6 | File Handling and IO      | Perform file operations in Python, such as reading from and writing to files, managing file paths, and handling exceptions.                                   | Understanding, Applying | Practical tests on file operations, real-world scenario exercises  |\n| CO7 | Real-world Problem Solving| Integrate Python programming skills to design and implement projects that solve realistic problems, demonstrating analytic and creative thinking.            | Creating             | Capstone project implementing a real-world application, presentations |",
      "last_updated_by": "You",
      "last_updated_at": "13 August 2025 10:53:49",
      "course_id": "09c0a2dc-395c-4b53-b7f9-5230311effaf"
    },
    {
      "asset_id": "68c1623d8501d91226eca976",
      "asset_name": "mark ",
      "asset_type": "mark-scheme",
      "asset_category": "content",
      "asset_content": "- **Assessment Title**: Intro to Python Programming Assessment\n- **Total Marks**: 100\n- **Marking Criteria**:\n\n  - **Basic Python Concepts** (20 marks)\n    - **Excellent (20 marks)**: Demonstrates comprehensive understanding of variables, data types, and control structures with fully functional and efficient code.\n    - **Good (15 marks)**: Shows good understanding, minor errors present but overall functionality is intact.\n    - **Satisfactory (10 marks)**: Shows basic understanding, some errors present which affect functionality.\n    - **Needs Improvement (5 marks)**: Demonstrates limited understanding with significant errors affecting code functionality.\n\n  - **Functional Programming** (15 marks)\n    - **Excellent (15 marks)**: Effectively develops modular code using functions and modules; code is efficient and well-organized.\n    - **Good (12 marks)**: Develops modular code with minor organizational issues.\n    - **Satisfactory (9 marks)**: Attempts to use modular coding but lacks organization and efficiency.\n    - **Needs Improvement (6 marks)**: Limited or no use of functions and modules, poorly organized code.\n\n  - **Data Structures Utilization** (15 marks)\n    - **Excellent (15 marks)**: Correctly utilizes lists, dictionaries, and sets in a problem-solving context, code is optimized.\n    - **Good (12 marks)**: Utilizes data structures with minor inefficiencies in problem-solving.\n    - **Satisfactory (9 marks)**: Uses data structures incorrectly or inefficiently but with some correct application.\n    - **Needs Improvement (6 marks)**: Limited understanding and incorrect use of data structures.\n\n  - **Debugging and Testing** (15 marks)\n    - **Excellent (15 marks)**: Identifies and fixes errors efficiently using debugging techniques and testing frameworks with no errors remaining.\n    - **Good (12 marks)**: Diagnoses and fixes most errors, minor issues may persist.\n    - **Satisfactory (9 marks)**: Attempts at debugging, some major errors remain unfixed.\n    - **Needs Improvement (6 marks)**: Fails to effectively diagnose and fix errors.\n\n  - **Object-Oriented Programming** (20 marks)\n    - **Excellent (20 marks)**: Implements classes and inheritance effectively and creatively with robust code.\n    - **Good (15 marks)**: Implements basic object-oriented principles correctly with slight inefficiencies.\n    - **Satisfactory (10 marks)**: Shows basic implementation with frequent errors.\n    - **Needs Improvement (5 marks)**: Limited understanding and incorrect implementation of object-oriented principles.\n\n  - **File Handling and IO** (15 marks)\n    - **Excellent (15 marks)**: Performs file operations such as reading/writing, handling exceptions with precision.\n    - **Good (12 marks)**: Performs file operations correctly, with minimal errors.\n    - **Satisfactory (9 marks)**: Basic file operations executed but significant errors present.\n    - **Needs Improvement (6 marks)**: Incorrectly performs file operations, fails to handle exceptions properly.",
      "last_updated_by": "You",
      "last_updated_at": "10 September 2025 17:04:21",
      "course_id": "09c0a2dc-395c-4b53-b7f9-5230311effaf"
    },
    {
      "asset_id": "68c1626c8501d91226eca977",
      "asset_name": "try",
      "asset_type": "question-paper",
      "asset_category": "assessments",
      "asset_content": "### Question Paper: Intro to Python\n\n**Total Marks: 100**\n**Duration: 2 hours**\n\n#### Section A: Basics of Python (20 marks)\n\n1. **Explain the purpose of using variables in Python. Provide an example to illustrate your explanation.** (5 marks)\n\n2. **Identify and explain two types of data structures available in Python with examples. How are they different from each other?** (3 + 3 = 6 marks)\n\n3. **Write a Python program using conditional statements to determine if a number is even or odd.** (1 + 2 = 3 marks)\n\n4. **What are control structures in Python, and why are they important? Provide examples of two control structures and how they are used.** (2 + 2 = 4 marks)\n\n#### Section B: Functional and Object-Oriented Programming (30 marks)\n\n5. **Develop a simple Python function that takes two numbers as arguments and returns their sum. Explain the components of a function in your code.** (3 + 2 = 5 marks)\n\n6. **Demonstrate how modules can be used in Python to organize code. Write a snippet where you import a module and use one of its functions.** (3 + 2 = 5 marks)\n\n7. **Discuss the concepts of classes and inheritance in Python. Write a class definition that includes a constructor and a simple inheritance.** (5 + 5 = 10 marks)\n\n8. **Evaluate a piece of code which includes both a syntax error and a logic error. Explain how you would go about debugging this code.** (5 marks)\n\n#### Section C: Advanced Concepts and Applications (50 marks)\n\n9. **Utilize lists and dictionaries in a Python program to store and retrieve information about students' grades. Provide a short explanation for your design choice.** (5 + 2 = 7 marks)\n\n10. **Describe how file handling is done in Python. Write a program snippet to read from a file and handle potential exceptions.** (5 + 5 = 10 marks)\n\n11. **Imagine you are tasked with creating a simple text-based contact book application. List the main features it would have, and illustrate with a code example that includes adding a new contact.** (5 + 3 + 2 = 10 marks)\n\n12. **Explain the concept of a 'real-world problem', and provide a scenario where Python could be used to address this problem. Write a brief plan of how you would approach the problem using Python.** (5 + 3 + 5 = 13 marks)",
      "last_updated_by": "You",
      "last_updated_at": "10 September 2025 17:05:08",
      "course_id": "09c0a2dc-395c-4b53-b7f9-5230311effaf"
    },
    {
      "asset_id": "68c163289a1182e123d0db82",
      "asset_name": "try mark",
      "asset_type": "mark-scheme",
      "asset_category": "assessments",
      "asset_content": "**Assessment Title:** Intro to Python Comprehensive Assessment\n\n**Total Marks:** 100\n\n**Marking Criteria:**\n\n1. **Python Basics (15 marks)**\n   - **Excellent (15 marks):** Demonstrates thorough understanding and accurate application of variables, data types, and control structures in Python with no errors.\n   - **Good (12 marks):** Understands and applies key concepts with minor errors or misconceptions.\n   - **Satisfactory (9 marks):** Basic understanding with correct application of some concepts but includes several errors.\n   - **Needs Improvement (6 marks):** Limited understanding and numerous errors in application.\n\n2. **Functional Programming (15 marks)**\n   - **Excellent (15 marks):** Creates well-structured functions and modules that effectively organize code with high efficiency.\n   - **Good (12 marks):** Develops functions with good structure, but minor inefficiencies are present.\n   - **Satisfactory (9 marks):** Uses functions with basic structuring; functional but lacks refinement.\n   - **Needs Improvement (6 marks):** Functions poorly structured; evident lack of understanding.\n\n3. **Data Structures (20 marks)**\n   - **Excellent (20 marks):** Efficient and correct use of lists, dictionaries, and sets to solve complex problems.\n   - **Good (16 marks):** Correct use of data structures with some minor inefficiencies in problem-solving.\n   - **Satisfactory (12 marks):** Basic understanding and application with several inaccuracies in using data structures.\n   - **Needs Improvement (8 marks):** Misunderstanding or misuse of data structures frequently observed.\n\n4. **Debugging and Testing (15 marks)**\n   - **Excellent (15 marks):** Effective use of advanced debugging techniques and testing frameworks with no errors left unresolved.\n   - **Good (12 marks):** Good application of debugging techniques with minor issues unresolved.\n   - **Satisfactory (9 marks):** Basic application; some errors resolved with guidance needed.\n   - **Needs Improvement (6 marks):** Ineffective debugging with significant errors remaining.\n\n5. **Object-Oriented Concepts (15 marks)**\n   - **Excellent (15 marks):** Impeccable implementation of classes and inheritance with examples demonstrating deep understanding.\n   - **Good (12 marks):** Correct implementation but with minor conceptual or application errors.\n   - **Satisfactory (9 marks):** Basic understanding with multiple errors in classes and inheritance application.\n   - **Needs Improvement (6 marks):** Misconceptions prevalent in implementation.\n\n6. **File Handling and IO (10 marks)**\n   - **Excellent (10 marks):** Fluent handling of file operations and exception management with no errors.\n   - **Good (8 marks):** Proper file handling procedures with minor errors or inefficiencies.\n   - **Satisfactory (6 marks):** Basic application with several procedural errors.\n   - **Needs Improvement (4 marks):** Ineffective or incorrect file handling frequently noted.\n\n7. **Real-world Problem Solving (10 marks)**\n   - **Excellent (10 marks):** Implements a comprehensive project that addresses real-world problems analytically and creatively.\n   - **Good (8 marks):** Implement project addressing a real-world problem, but has minor analytical gaps.\n   - **Satisfactory (6 marks):** Basic project implementation with significant analytical gaps.\n   - **Needs Improvement (4 marks):** Incomplete or inadequate problem-solving approach.",
      "last_updated_by": "You",
      "last_updated_at": "10 September 2025 17:08:16",
      "course_id": "09c0a2dc-395c-4b53-b7f9-5230311effaf"
    },
    {
      "asset_id": "68c3bff0c18c4d23e5a718bb",
      "asset_name": "try new",
      "asset_type": "evaluation-report",
      "asset_category": "evaluation",
      "asset_content": "# Evaluation Report\n\n**Total Students:** 1\n**Evaluation Date:** 12 September 2025\n\n## Student 1\n**File:** file-GCpw6E8GXWXg7Zg1stxLJN\n**Total Score:** 38/44\n**Status:** completed\n\n### Question 1\n**Question:** Data Types: List four basic data types in Python and give an example of each.\n**Student Answer:** Int, Float, String, Bool\n**Score:** 2/4\n**Feedback:** Correctly lists the data types but lacks examples. Awarded 1 mark each for correct listing of 'int' and 'float'. Missing examples result in partial credit.\n\n### Question 2\n**Question:** Control Flow: Explain the role of for and while loops in Python. Provide a code snippet for each that prints numbers 1 to 5.\n**Student Answer:** For loop: For i in range(1,6): print(i) While loop: i = 1 while i <= 5: print(i) i += 1\n**Score:** 4/4\n**Feedback:** Excellent demonstration of understanding both loop types with correct code snippets. Fully awarded.\n\n### Question 3\n**Question:** Functions: Define a Python function. Write a function greet(name) that prints \"Hello, <name>!\".\n**Student Answer:** def greet(name): print(\"Hello, \" + name + \"!\")\n**Score:** 3/3\n**Feedback:** Correct function definition and functionality. Awarded full marks for implementing greet function correctly.\n\n### Question 4\n**Question:** Lists and Tuples: Differentiate between lists and tuples in Python. Provide one example where using a tuple is more beneficial than a list.\n**Student Answer:** Lists are mutable, tuples are immutable. Use tuples for fixed data records.\n**Score:** 5/5\n**Feedback:** Complete and correct explanation of the differences and benefit. Full marks awarded for excellent differentiation and practical example.\n\n### Question 5\n**Question:** Dictionaries: Write a Python code to create a dictionary with three key-value pairs representing a product's name, price, and stock. Display the dictionary.\n**Student Answer:** product = {'name': 'Apple', 'price': 1.0, 'stock': 50} print(product)\n**Score:** 4/4\n**Feedback:** Correctly created and displayed dictionary with key-value pairs. Full credit awarded for correct implementation.\n\n### Question 6\n**Question:** File Handling: Describe how to open and read a text file in Python. Write a code sample that reads a file and prints its contents.\n**Student Answer:** f = open('file.txt', 'r') print(f.read()) f.close()\n**Score:** 3/5\n**Feedback:** Correct code sample provided but lacking detailed explanation of file handling in Python, thus partial credit given. Consider adding a description of file operations.\n\n### Question 7\n**Question:** Object-Oriented Programming: Explain encapsulation with an example involving a class for BankAccount that includes private data members.\n**Student Answer:** class BankAccount: __balance = 0 def deposit(self, amount): self.__balance += amount\n**Score:** 4/6\n**Feedback:** Good encapsulation example, but explanation could be clearer. Partial credit given as example uses private members, missing explanation on encapsulation principle.\n\n### Question 8\n**Question:** Modules and Libraries: What is a module in Python? How can you import and use the random module to generate a random integer between 1 and 10?\n**Student Answer:** module is a file with Python code. Import random, use random.randint(1, 10).\n**Score:** 4/4\n**Feedback:** Correct explanation and application of the random module. Full marks awarded.\n\n### Question 9\n**Question:** Error Handling: What is the purpose of try-except blocks in Python? Write a simple program to handle the exception of dividing a number by zero.\n**Student Answer:** try: print(1 / 0) except ZeroDivisionError: print('Cannot divide by zero')\n**Score:** 5/5\n**Feedback:** Completely correct purpose explanation and complete code for exception handling. Full marks awarded.\n\n### Question 10\n**Question:** Data Analysis: Using the pandas library, write a code snippet to load a CSV file and print the column names.\n**Student Answer:** import pandas as pd data = pd.read_csv('file.csv') print(data.columns)\n**Score:** 4/4\n**Feedback:** Correct use of pandas to load CSV and print column names. Awarded full marks.\n\n---\n\n",
      "last_updated_by": "You",
      "last_updated_at": "12 September 2025 06:38:40",
      "course_id": "09c0a2dc-395c-4b53-b7f9-5230311effaf"
    }
  ]
}